# Stock Returns Based On PE Ratios

```elixir
Mix.install(
  [
    {:nx, "~> 0.5.3"},
    {:explorer, "~> 0.6.1"},
    {:kino, "~> 0.10.0"},
    {:kino_vega_lite, "~> 0.1.9"},
    {:kino_explorer, "~> 0.1.8"},
    {:exla, "~> 0.5.3"},
    {:axon, "~> 0.5.1"},
    {:exgboost, "~> 0.3.0"}
  ],
  config: [nx: [default_backend: EXLA.Backend]]
)
```

## Read In The CSVs

```elixir
require Explorer.DataFrame, as: DF

paths =
  "~/Dropbox/stocks/*.csv"
  |> Path.expand()
  |> Path.wildcard()

dates =
  Enum.map(paths, fn path ->
    Code.eval_quoted(
      quote do
        Date.new(
          unquote_splicing(
            Enum.map(String.split(Path.basename(path, ".csv"), "-"), &String.to_integer/1)
          )
        )
      end
    )
  end)

dates = Enum.map(dates, fn date -> elem(elem(date, 0), 1) end)
dataframes = Enum.map(paths, fn path -> Explorer.DataFrame.from_csv!(path, header: false) end)

dataframes =
  Enum.map(dataframes, fn df -> Explorer.DataFrame.rename(df, ["ticker", "price", "pe_ratio"]) end)

date_lists =
  Enum.with_index(dataframes, fn df, i ->
    fn -> Enum.at(dates, i) end
    |> Stream.repeatedly()
    |> Enum.take(Explorer.Series.count(df["ticker"]))
  end)

date_series = Enum.map(date_lists, fn date_list -> Explorer.DataFrame.new(date: date_list) end)

dataframes =
  Enum.with_index(dataframes, fn df, i -> DF.concat_columns(df, Enum.at(date_series, i)) end)

dataframes =
  Enum.map(dataframes, fn df ->
    DF.mutate(df, %{date: cast(date, :date)})
  end)
```

## Concat The Rows

```elixir
require Explorer.DataFrame, as: DF

total_df = DF.concat_rows(dataframes)
total_df = DF.mutate(total_df, %{ticker: cast(ticker, :category)})
```

## Sort By Ticker

```elixir
require Explorer.DataFrame, as: DF

tickers = Explorer.Series.categories(total_df["ticker"])
total_df = DF.mutate(total_df, %{ticker: cast(ticker, :string)})

ticker_dfs =
  Enum.map(Explorer.Series.to_list(tickers), fn ticker ->
    DF.filter(total_df, ticker == ^ticker)
  end)

length(ticker_dfs)
```

## Shift By 1 And Take Percent Change

```elixir
require Explorer.DataFrame, as: DF

shifted_ticker_dfs =
  Enum.map(ticker_dfs, fn df ->
    DF.mutate(df, %{price_shifted: Explorer.Series.shift(price, 1)})
  end)

ticker_dfs_with_percentages =
  Enum.map(shifted_ticker_dfs, fn df ->
    DF.mutate(df, %{percent_change: (price - price_shifted) / price_shifted})
  end)

# drop the first row
ticker_dfs_with_percentages = Enum.map(ticker_dfs_with_percentages, fn df -> DF.drop_nil(df) end)
```

## Shape The Data

```elixir
prediction_days_text = Kino.Input.text("Num Prediction Days")
```

```elixir
prediction_days = String.to_integer(Kino.Input.read(prediction_days_text))

slice_fun = fn df ->
  x =
    for i <- prediction_days..(elem(DF.shape(df), 0) - 1) do
      df
      |> DF.select(["price", "pe_ratio", "percent_change"])
      |> DF.slice((i - prediction_days)..(i - 1))
    end

  x =
    Enum.map(
      x,
      fn df ->
        Nx.concatenate(
          [
            Nx.reshape(Explorer.Series.to_tensor(df["price"]), {:auto, 1}),
            Nx.reshape(Explorer.Series.to_tensor(df["pe_ratio"]), {:auto, 1}),
            Nx.reshape(Explorer.Series.to_tensor(df["percent_change"]), {:auto, 1})
          ],
          axis: 1
        )
      end
    )

  x = Enum.into(x, <<>>, fn df -> Nx.to_binary(df) end)
  x = Nx.from_binary(x, :f64)

  y =
    for i <- prediction_days..(elem(DF.shape(df), 0) - 1) do
      Explorer.Series.to_tensor(DF.slice(df, [i])["percent_change"])
    end

  num_days = length(y)
  x = Nx.reshape(x, {num_days, prediction_days, 3})
  y = Nx.concatenate(y)

  [x, y]
end

sliced_frames = Enum.map(ticker_dfs_with_percentages, fn df -> [df["ticker"], slice_fun.(df)] end)
```

## Train/Test Split

```elixir
test_num_text = Kino.Input.text("Number of Test Cases")
```

```elixir
require Explorer.DataFrame, as: DF

test_num = String.to_integer(Kino.Input.read(test_num_text))

train_test_split_fun = fn x_tensors, y_tensors ->
  train_length = elem(Nx.shape(x_tensors), 0) - test_num

  if train_length < 0 do
    IO.puts(Nx.shape(x_tensors))
  end

  [x_train, y_train] = [
    Nx.slice(x_tensors, [0, 0, 0], [train_length, prediction_days, 3]),
    Nx.slice(y_tensors, [0], [train_length])
  ]

  [x_test, y_test] = [
    Nx.slice(x_tensors, [train_length, 0, 0], [test_num, prediction_days, 3]),
    Nx.slice(y_tensors, [train_length], [test_num])
  ]

  [[x_train, y_train], [x_test, y_test]]
end

train_test_split =
  sliced_frames
  |> Enum.filter(fn [_, [x_tensor, _]] -> elem(Nx.shape(x_tensor), 0) > test_num end)
  |> Enum.map(fn [tickers, [x, y]] -> [tickers[0], train_test_split_fun.(x, y)] end)
```

## Try EXGBoost

```elixir
[ticker, [[first_item_train_x, first_item_train_y], [first_item_test_x, first_item_test_y]]] =
  train_test_split |> Enum.at(0)

# EXGBoost.train(first_item_train_x, first_item_train_y)
[ticker, first_item_train_x]
```
